name: Security Scan Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 0 * * 1'  # Runs every Monday at midnight UTC

permissions:
  contents: read

jobs:
  # Trivy to do Secret Scanning and SCA
  fs-scan:
    permissions:
      contents: read            # for actions/checkout to fetch code
      security-events: write    # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read             # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Secret Scanning & SCA
    runs-on: ubuntu-latest
    steps:
      # Checkout the codebase
      - name: Checkout code
        uses: actions/checkout@v4

      # Set a dynamic file name for the report
      - name: Set Trivy JSON report file name
        run: echo "TRIVY_REPORT_NAME=trivy-fs-report_$(date +'%Y-%m-%d_%H-%M').json" >> $GITHUB_ENV

      # Run Trivy in fs mode, create a JSON report
      - name: Run Trivy in fs mode, generate JSON vulnerability report
        uses: aquasecurity/trivy-action@master  #trivy-action says 0.28.0
        with:
          scan-type: "fs"
          output: '${{ env.TRIVY_REPORT_NAME }}'
          format: 'json'
          scan-ref: '.'
          exit-code: '0'
          # Enable next line for ad-hoc analysis
          #trivy-config: trivy.yaml  # I should create this file, in case

      # Upload the Trivy JSON report
      - name: Upload vulnerability scan results (JSON)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs_json-report
          path: ${{ env.TRIVY_REPORT_NAME }}
          retention-days: 30

      # Run Trivy in fs mode, create a SARIF report
      - name: Run Trivy in fs mode, generate SARIF vulnerability report
        uses: aquasecurity/trivy-action@master  #trivy-action says 0.28.0
        with:
          scan-type: "fs"
          output: 'trivy-fs_sarif-report.sarif'
          format: 'sarif'
          scan-ref: '.'
          hide-progress: true
          exit-code: '0'
          # On a subsequent call to the action we know Trivy is already installed so can skip this
          skip-setup-trivy: true
          # Enable next line for ad-hoc analysis
          #trivy-config: trivy.yaml  # I should create this file, in case

      # Upload SARIF results for IaC scanning to GitHub Security tab
      - name: Upload vulnerability scan results (sarif)
        uses: github/codeql-action/upload-sarif@v3
        # Upload SARIF results to GitHub Code scanning even upon a non zero exit code from Trivy Scan
        if: always()
        with:
          sarif_file: 'trivy-fs_sarif-report.sarif'

      ## Run Trivy in fs mode, failing in case of High/Critical vulnerabilities
      #- name: Run Trivy in fs mode, fail build on high/criticial vulnerabilities
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    scan-type: "fs"
      #    format: 'table'
      #    scan-ref: '.'
      #    severity: HIGH,CRITICAL
      #    ignore-unfixed: true
      #    exit-code: '1'
      #    skip-setup-trivy: true

  # Bandit to do Static Application Security Test (SAST)
  sast:
    permissions:
      contents: read            # for actions/checkout to fetch code
      security-events: write    # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read             # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: SAST
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install Bandit, including support for SARIF and TOML files
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[sarif,toml]

      # Set a dynamic file name for the JSON report
      - name: Set Bandit JSON report file name
        run: echo "BANDIT_REPORT_NAME=bandit-report_$(date +'%Y-%m-%d_%H-%M').json" >> $GITHUB_ENV

      # Run Bandit to do SAST, generate JSON and SARIF reports
      - name: Run Bandit, generate reports
        # `set +e` allows the script to continue even if Bandit fails, so that both reports are generated
        run: |
          set +e
          bandit -r . -f json -o ${{ env.BANDIT_REPORT_NAME }}
          bandit -r . -f sarif -o bandit-sarif-report.sarif
        continue-on-error: true

      # Upload the Bandit JSON report
      - name: Upload Bandit results (JSON)
        uses: actions/upload-artifact@v4
        with:
          name: bandit-json-report
          path: ${{ env.BANDIT_REPORT_NAME }}
          retention-days: 30

      # Upload Bandit SARIF results to GitHub Security tab
      - name: Upload vulnerability results (SARIF)
        uses: github/codeql-action/upload-sarif@v3
        # Upload SARIF results to GitHub Code scanning even upon a non zero exit code
        if: always()
        with:
          sarif_file: 'bandit-sarif-report.sarif'


  # Trivy to do Infrastructure as Code (IaC) scanning
  iac-scan:
    permissions:
      contents: read            # for actions/checkout to fetch code
      security-events: write    # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read             # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: IaC Analysis
    runs-on: ubuntu-latest
    steps:
      # Checkout the codebase
      - name: Checkout code
        uses: actions/checkout@v4

      # Run Trivy in config mode, create sarif report
      - name: Run Trivy in config mode to do IaC Analysis, fail build on high/criticial vulnerabilities
        uses: aquasecurity/trivy-action@master  #trivy-action says 0.28.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          hide-progress: true
          format: 'sarif'
          output: 'trivy-iac_sarif-report.sarif'
          # For now, it is 0, will be promoted to 1
          exit-code: '0' # Fail if HIGH/CRITICAL vulnerabilities are found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      # Upload SARIF results for IaC scanning to GitHub Security tab
      - name: Upload Trivy IaC scan results (sarif)
        uses: github/codeql-action/upload-sarif@v3
        # Upload SARIF results to GitHub Code scanning even upon a non zero exit code from Trivy Scan
        if: always()
        with:
          sarif_file: 'trivy-iac_sarif-report.sarif'
